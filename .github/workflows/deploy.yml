name: Deployment

on:
    workflow_dispatch: {}

jobs:
    build:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4

            - name: Set up QEMU
              uses: docker/setup-qemu-action@v3

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Login to Docker Hub
              uses: docker/login-action@v3
              with:
                  username: ${{ vars.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_TOKEN }}

            - name: Build and Push
              uses: docker/build-push-action@v6
              with:
                  context: .
                  file: ./Dockerfile
                  platforms: linux/amd64,linux/arm64
                  push: true
                  tags: ${{ vars.DOCKER_USERNAME }}/app:latest

    deploy:
        needs: [build]
        runs-on: ubuntu-latest

        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4

            - name: Create .env file
              run: |
                  echo APP_HOST=${{ secrets.APP_HOST }} >> .env
                  echo APP_PORT=${{ secrets.APP_PORT }} >> .env
                  echo DB_HOST=${{ secrets.DB_HOST }} >> .env
                  echo DB_PORT=${{ secrets.DB_PORT }} >> .env
                  echo DB_USER=${{ secrets.DB_USER }} >> .env
                  echo DB_PW=${{ secrets.DB_PASSWORD }} >> .env
                  echo DB_NAME=${{ secrets.DB_DATABASE }} >> .env
                  echo ACCESS_TOKEN_SECRET=${{ secrets.ACCESS_TOKEN_SECRET }} >> .env
                  echo REFRESH_TOKEN_SECRET=${{ secrets.REFRESH_TOKEN_SECRET }} >> .env
                  echo ACCESS_TOKEN_EXPIRY_TIME=${{ secrets.ACCESS_TOKEN_EXPIRY_TIME }} >> .env
                  echo REFRESH_TOKEN_EXPIRY_TIME=${{ secrets.REFRESH_TOKEN_EXPIRY_TIME }} >> .env

            - name: Set up SSH key
              run: |
                  mkdir -p ~/.ssh
                  echo "${{ secrets.SSH_PRIVATE_KEY }}" >> ~/.ssh/sikhoo0-server.pem
                  chmod 400 ~/.ssh/sikhoo0-server.pem

            - name: Create Docker Context
              run: |
                  docker context create sikhoo0-server-context \
                    --docker "host=ssh://${{ secrets.USERNAME }}@${{ secrets.HOST }}"
                  docker context use sikhoo0-server-context

            - name: Deploy application
              run: |
                  eval $(ssh-agent -s)
                  ssh-add ~/.ssh/sikhoo0-server.pem
                  ssh-keyscan -H ${{ secrets.HOST }} >> ~/.ssh/known_hosts
        
                  if [ $(docker ps -q -f name=app) ]; then
                    docker compose -f docker-compose.prod.yml build app
                    docker compose -f docker-compose.prod.yml up --no-deps -d app
                  else
                    docker compose -f docker-compose.prod.yml up -d
                  fi
