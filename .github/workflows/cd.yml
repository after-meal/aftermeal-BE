name: Deployment

on:
  workflow_dispatch: {}

jobs:
  build-reverse-proxy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Check Nginx changes
        id: nginx-changes
        run: |
          if [ git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q '^nginx/' ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Build and Push Reverse Proxy
        if: steps.nginx-changes.outputs.changed == 'true'
        uses: docker/build-push-action@v6
        with:
          context: ./nginx
          file: ./nginx/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/reverse-proxy:latest

  build-app:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push App
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ vars.DOCKER_USERNAME }}/app:latest

  deploy:
    needs: [build-reverse-proxy, build-app]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Create .env file
        env:
          APP_HOST: ${{ secrets.APP_HOST }}
          APP_PORT: ${{ secrets.APP_PORT }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
          ACCESS_TOKEN_SECRET: ${{ secrets.ACCESS_TOKEN_SECRET }}
          REFRESH_TOKEN_SECRET: ${{ secrets.REFRESH_TOKEN_SECRET }}
          ACCESS_TOKEN_EXPIRY_TIME: ${{ secrets.ACCESS_TOKEN_EXPIRY_TIME }}
          REFRESH_TOKEN_EXPIRY_TIME: ${{ secrets.REFRESH_TOKEN_EXPIRY_TIME }}
        run: |
          echo APP_HOST=$APP_HOST >> .env
          echo APP_PORT=$APP_PORT >> .env
          echo DB_HOST=$DB_HOST >> .env
          echo DB_PORT=$DB_PORT >> .env
          echo DB_USER=$DB_USER >> .env
          echo DB_PASSWORD=$DB_PASSWORD >> .env
          echo DB_NAME=$DB_NAME >> .env
          echo ACCESS_TOKEN_SECRET=$ACCESS_TOKEN_SECRET >> .env
          echo REFRESH_TOKEN_SECRET=$REFRESH_TOKEN_SECRET >> .env
          echo ACCESS_TOKEN_EXPIRY_TIME=$ACCESS_TOKEN_EXPIRY_TIME >> .env
          echo REFRESH_TOKEN_EXPIRY_TIME=$REFRESH_TOKEN_EXPIRY_TIME >> .env

      - name: Set up SSH key
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          HOST: ${{ secrets.HOST }}
        run: |
          mkdir -p ~/.ssh
          eval $(ssh-agent -s)
          echo "$SSH_PRIVATE_KEY" | ssh-add -
          echo "SSH_AUTH_SOCK=$SSH_AUTH_SOCK" >> $GITHUB_ENV
          ssh-keyscan -H $HOST >> ~/.ssh/known_hosts

      - name: Deploy application
        env:
          USERNAME: ${{ secrets.USERNAME }}
          HOST: ${{ secrets.HOST }}
          SSH_AUTH_SOCK: ${{ env.SSH_AUTH_SOCK }}
        run: |
          docker context create sikhoo0-server-context --docker "host=ssh://$USERNAME@$HOST"
          docker context use sikhoo0-server-context

          if [ $(docker ps -q -f name=app) ]; then
            docker compose -f docker-compose.prod.yml build app
            docker compose -f docker-compose.prod.yml up --no-deps -d app
          else
            docker compose -f docker-compose.prod.yml up -d
          fi

          if [ $(docker ps -q -f name=reverse-proxy) ]; then
            docker compose -f docker-compose.prod.yml build reverse-proxy
            docker compose -f docker-compose.prod.yml up --no-deps -d reverse-proxy
          else
            docker compose -f docker-compose.prod.yml up -d
          fi
